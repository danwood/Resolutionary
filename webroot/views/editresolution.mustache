{{>header}}

{{! ASSUMES WE ARE AUTHENTICATED TO SEE THIS PAGE. }}


<h1>Edit a resolution</h1>

  <div class="container">

    {{#resolutions}}
    <div class="row">
      <div class="three columns">
<h5><span>id: {{id}}</span></h5>
<h5><span>Creation: {{creationTimeStamp}}</span></h5>
      </div>
      <div class="six columns">

<p>Board ID: <input name="boardID" value="{{boardID}}"  onkeyup='send(event)' /></p>
<p>author ID: <input name="authorID" value="{{authorID}}"  onkeyup='send(event)' /></p>

<p>coauthors: <input name="coauthors" value="{{coauthors}}" onkeyup='send(event)' /></p>

{{! FIXME: The textarea should be escaped, but then newlines get converted to BR tags in the textarea! }}

<p>PUBLUC notes markdown:</p>
<p><textarea id='publicNotesMarkdown' name="publicNotesMarkdown" cols=60 rows=20 onkeyup='send(event)'>{{{publicNotesMarkdown}}}</textarea></p>

<div id='publicNotesMarkdownRendered'></div>

<p>PRIVATE notes markdown:</p>
<p><textarea id='privateNotesMarkdown' name="privateNotesMarkdown" cols=60 rows=20 onkeyup='send(event)'>{{{privateNotesMarkdown}}}</textarea></p>

<div id='privateNotesMarkdownRendered'></div>






      </div>
      <div class="three columns">
      </div>
    </div>
    {{/resolutions}}
{{^resolutions}}
No resolutionsâ€¦
{{/resolutions}}


  </div>






<script>

var sock;

function init()
{
	sock=new WebSocket('ws://' + window.location.host + '/editor{{#resolutions}}/{{id}}{{/resolutions}}', 'editor');		// ... API, PROTOCOL
	sock.onmessage=function(evt) {
		index = evt.data.indexOf("\n");			// Received data should be dest element ID, newline, then the HTML to put into it.
		destID = evt.data.substr(0, index);
		newValue = evt.data.substr(index+1);
		output = document.getElementById(destID);
		if (output) {
			output.innerHTML = newValue;
		} else {
			alert('Missing output ' + destID);
		}
	}
	sock.onopen = function() {
		// Maybe I could make this more generic, find all textAreas with Markdown and render
		var publicNotesMarkdown = document.getElementById('publicNotesMarkdown').innerHTML;
		sock.send("publicNotesMarkdown\n" + publicNotesMarkdown);

	var privateNotesMarkdown = document.getElementById('privateNotesMarkdown').innerHTML;
	sock.send("privateNotesMarkdown\n" + privateNotesMarkdown);

};
}

var periodicTimer;	// Process, queued for a bit into the future, every N seconds, so when typing fast we see results frequently.
					// Note that hitting return sends text IMMEDIATELY for processing.
var evtTarget;		// Save event that timer is referring to

function send(evt) {

	if (13 == evt.keyCode) {				// If it's a newline, send it immediately.
		clearTimeout(periodicTimer);
		periodicTimer = null;
		sock.send(evt.currentTarget.name + '\n' + evt.currentTarget.value);
	} else {
		if (!periodicTimer) {

			evtTarget = evt.currentTarget;
			periodicTimer = setTimeout(function() {
				sock.send(evtTarget.name + '\n' + evtTarget.value);		// Send to server for immediate saving and possibly Markdown translation
				clearTimeout(periodicTimer);
				periodicTimer = null;
			}, 3000);
		}
	}
}

window.addEventListener('load', init, false);

</script>

{{>footer}}
