{{>header}}

{{! ASSUMES WE ARE AUTHENTICATED TO SEE THIS PAGE. }}

{{! We can see status and private notes only if we are the author. }}

<h1>View a resolution</h1>

	<div class="row">
		<div class="six columns">

{{#resolution}}

			<h5>Resolution Status:</h5>
			<select name="resolution_status" id="resolution_status" onchange='send(event)'>
{{#status_options}}
			<option value="{{val}}" title="{{title}}" {{sel}}>{{title}} — {{info}}</option>
{{/status_options}}
			</select>
			<h5><span>Resolution ID: {{id}}</span></h5>
			<h5><span>Creation: {{creationTimeStamp}}</span></h5>

			<p>Board ID: <input name="boardID" value="{{boardID}}"  onblur='send(event)' onkeyup='send(event)' /></p>
			<p>author ID: <input name="authorID" value="{{authorID}}"  onblur='send(event)' onkeyup='send(event)' /></p>

			<p>Public notes about this resolution:</p>
			<p>
				<textarea id='publicNotesMarkdown' name="publicNotesMarkdown" cols="60" rows="5"
					onblur='send(event)' onkeyup='send(event)'>{{{publicNotesMarkdown}}}</textarea>
			</p>

			<div id='publicNotesMarkdownRendered'></div>

			<p><span style="color:red">Private</span> notes about this resolution:</p>
			<p>
				<textarea id='privateNotesMarkdown' name="privateNotesMarkdown" cols="60" rows="5"
					onblur='send(event)' onkeyup='send(event)'>{{{privateNotesMarkdown}}}</textarea>
			</p>

			{{! FIXME: The textarea should be escaped, but then newlines get converted to BR tags in the textarea! }}

			<div id='privateNotesMarkdownRendered'></div>

{{/resolution}}
{{#resolution_version}}

{{! RENDERED, WHEN VERSION IS ALREADY PUBLISHED }}

{{#isPublished}}

			<p>Version: {{version}} (hidden ID {{id}})</p>
			<p>Title: {{title}}</p>
			<p>Co-Authors: {{coauthors}}</p>

			<p>Resolution Body:</p>
<div id='textMarkdownRendered'>{{{textMarkdownRendered}}}</div>

{{/isPublished}}

{{! TEXT INPUTS WHEN VERSION IS NOT PUBLISHED YET }}

{{^isPublished}}

			<p>Version: {{version}}</p>
			<p>Title: <input name="title" id="title" value="{{title}}"  onblur='send(event);updatePublishingButton();' onkeyup='send(event);updatePublishingButton();' /></p>
			<p>Co-Authors: <input id="coauthors" name="coauthors" value="{{coauthors}}"  onblur='send(event)' onkeyup='send(event)' /></p>

			<p>Resolution Body:</p>
			<p>
				<textarea id='textMarkdown' name="textMarkdown" cols="60" rows="15" placeholder='WHEREAS …'
					onblur='send(event);updatePublishingButton();' onkeyup='send(event);updatePublishingButton();'>{{{textMarkdown}}}</textarea>
			</p>

{{! FIXME: The textarea should be escaped, but then newlines get converted to BR tags in the textarea! }}

			<div id='textMarkdownRendered'></div>

			<form action = "/newversion/{{resolutionID}}" method = "post">
				<input id="publish_button"
					{{#disablePublishing}}disabled="disabled"{{/disablePublishing}}
					type="submit" value="Publish as new version" name="Publish" onclick='send(this)' />
			</form>

{{/isPublished}}

{{/resolution_version}}
{{^resolution_version}}
			<p>MISSING latest resolution version!</p>
{{/resolution_version}}

{{#resolution_versions}}

{{! It would be nice to have a function to show an excerpt of what has been changed/added from a version relative to its previous version }}

{{#isPublished}}
			<h3>Published Version: <a href="/editresolution/{{resolutionID}}/{{version}}">{{version}}</a></h3>
{{/isPublished}}
{{^isPublished}}
			<h3><a href="/editresolution/{{resolutionID}}">Working Version {{version}}</a></h3>
{{/isPublished}}

{{/resolution_versions}}

		</div>{{!six columns}}
	</div>{{!row}}


{{^resolution}}
No resolutions…
{{/resolution}}



<script>

var sock;

function init()
{
	sock=new WebSocket('ws://' + window.location.host + '/editor{{#resolution}}/{{id}}{{/resolution}}', 'editor');		// ... API, PROTOCOL
	sock.onmessage=function(evt) {
		index = evt.data.indexOf("\n");			// Received data should be dest element ID, newline, then the HTML to put into it.
		destID = evt.data.substr(0, index);
		newValue = evt.data.substr(index+1);
		output = document.getElementById(destID);
		if (output) {
			output.innerHTML = newValue;
		} else {
			alert('Missing output ' + destID);
		}
	}
	sock.onopen = function() {
		// Maybe I could make this more generic, find all textAreas with Markdown and render
	var publicNotesMarkdown = document.getElementById('publicNotesMarkdown').innerHTML;
	if (publicNotesMarkdown) sock.send("#publicNotesMarkdown\n" + publicNotesMarkdown);	// # = return processsed markdown without saving
	var privateNotesMarkdown = document.getElementById('privateNotesMarkdown').innerHTML;
	if (privateNotesMarkdown) sock.send("#privateNotesMarkdown\n" + privateNotesMarkdown);	// # = return processsed markdown without saving
	var textMarkdown = document.getElementById('textMarkdown').innerHTML;
	if (textMarkdown) sock.send("#textMarkdown\n" + textMarkdown);	// # = return processsed markdown without saving
	};
}

var periodicTimer;	// Process, queued for a bit into the future, every N seconds, so when typing fast we see results frequently.
					// Note that hitting return sends text IMMEDIATELY for processing.
var evtTarget;		// Save event that timer is referring to

function send(evt) {

	if (!(evt instanceof KeyboardEvent) || 13 == evt.keyCode) {				// If a newline, send it immediately.
		clearTimeout(periodicTimer);
		periodicTimer = null;
		sock.send(evt.currentTarget.name + '\n' + evt.currentTarget.value);
	} else {
		if (!periodicTimer) {

			evtTarget = evt.currentTarget;
			periodicTimer = setTimeout(function() {
				sock.send(evtTarget.name + '\n' + evtTarget.value);		// Send to server for immediate saving and possibly Markdown translation
				clearTimeout(periodicTimer);
				periodicTimer = null;
			}, 3000);
		}
	}
}

window.addEventListener('load', init, false);

// This gets called after every keypress that might affect if publishing is possible.
// The button starts out disabled if body/title are empty, so the only way to update it is to make *some* change.
// This is close enough, quick and dirty … with more logic on the back-end.

function updatePublishingButton() {

	var button = document.getElementById('publish_button');
	var body = document.getElementById('textMarkdown').innerHTML;
	var title = document.getElementById('title').value;
	var coauthors = document.getElementById('coauthors').value;

	button.disabled = "" == body || "" == title
}

</script>

{{>footer}}
